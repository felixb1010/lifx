/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/lights/{selector}/state": {
    put: operations["set-state"];
  };
  "/scenes": {
    get: operations["list-scenes"];
  };
  "/color": {
    /** Validate a color string */
    get: operations["validate-color"];
  };
  "/lights/{selector}/effects/pulse": {
    post: operations["pulse-effect"];
  };
  "/lights/states": {
    /** Set multiple states across multiple selectors. */
    put: operations["set-states"];
  };
  "/lights/{selector}/toggle": {
    post: operations["toggle-power"];
  };
  "/lights/{selector}/effects/breathe": {
    post: operations["breathe-effect"];
  };
  "/scenes/scene_id::scene_uuid/activate": {
    put: operations["activate-scene"];
  };
  "/lights/{selector}": {
    get: operations["list-lights"];
  };
  "/lights/:selector/cycle": {
    /** Make the light(s) cycle to the next or previous state in a list of states. */
    post: operations["cycle"];
  };
  "/lights/{selector}/state/delta": {
    post: operations["state-delta"];
  };
  "/lights/{selector}/effects/move": {
    post: operations["move-effect"];
  };
  "/lights/{selector}/effects/morph": {
    post: operations["morph-effect"];
  };
  "/lights/{selector}/effects/flame": {
    post: operations["flame-effect"];
  };
  "/lights/{selector}/effects/off": {
    post: operations["effects-off"];
  };
  "/lights/{selector}/clean": {
    /** Control clean-capable LIFX devices */
    post: operations["clean"];
  };
}

export interface components {}

export interface operations {
  "set-state": {
    parameters: {
      path: {
        /** The [selector](doc:selectors) to limit which lights are controlled. */
        selector: string;
      };
    };
    responses: {
      /** 202 */
      202: {
        content: {
          "text/plain": unknown;
        };
      };
      /** 2XX */
      "2XX": {
        content: {
          "application/json": {
            results?: {
              /** @example d3b2f2d97452 */
              id?: string;
              /** @example Left Lamp */
              label?: string;
              /** @example ok */
              status?: string;
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The power state you want to set on the selector. `on` or `off` */
          power?: string;
          /** @description The [color](doc:colors) to set the light to. */
          color?: string;
          /**
           * Format: double
           * @description The brightness level from `0.0` to `1.0`. Overrides any brightness set in `color` (if any).
           */
          brightness?: number;
          /**
           * Format: double
           * @description How long in seconds you want the power action to take. Range: `0.0` â€“ `3155760000.0` (100 years)
           * @default 1
           */
          duration?: number;
          /**
           * Format: double
           * @description The maximum brightness of the infrared channel from `0.0` to `1.0`.
           */
          infrared?: number;
          /**
           * @description Execute the query [fast](#fast-mode), without initial state checks and wait for no results.
           * @default false
           */
          fast?: boolean;
        };
      };
    };
  };
  "list-scenes": {
    responses: {
      /** 200 */
      200: {
        content: {
          "application/json": {
            /** @example 1d52671c-99ba-4631-a563-2c31809b700d */
            uuid?: string;
            /** @example Night time */
            name?: string;
            account?: {
              /** @example cc7e0336-43c8-4f00-b874-830690884adc */
              uuid?: string;
            };
            states?: {
              /**
               * @default 0
               * @example 0.1
               */
              brightness?: number;
              /** @example id:d073d5002bb3 */
              selector?: string;
            }[];
            /**
             * @default 0
             * @example 1430118664
             */
            created_at?: number;
            /**
             * @default 0
             * @example 1430118664
             */
            updated_at?: number;
          }[];
        };
      };
    };
  };
  /** Validate a color string */
  "validate-color": {
    parameters: {
      query: {
        /** Color string you'd like to validate */
        string: string;
      };
    };
    responses: {
      /** 200 */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** 422 */
      422: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  "pulse-effect": {
    parameters: {
      path: {
        /** The [selector](doc:selectors) to limit which lights will run the effect. */
        selector: string;
      };
    };
    responses: {
      /** 2XX */
      "2XX": {
        content: {
          "application/json": {
            results?: {
              /** @example d3b2f2d97452 */
              id?: string;
              /** @example Left Lamp */
              label?: string;
              /** @example ok */
              status?: string;
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The [color](doc:colors) to use for the pulse effect. */
          color: string;
          /**
           * @description The [color](doc:colors) to start the effect from. If this parameter is omitted then the color the bulb is currently set to is used instead.
           * @default current bulb color
           */
          from_color?: string;
          /**
           * Format: double
           * @description The time in seconds for one cyles of the effect.
           * @default 1
           */
          period?: number;
          /**
           * Format: double
           * @description The number of times to repeat the effect.
           * @default 1
           */
          cycles?: number;
          /**
           * @description If false set the light back to its previous value when effect ends, if true leave the last effect color.
           * @default false
           */
          persist?: boolean;
          /**
           * @description If true, turn the bulb on if it is not already on.
           * @default true
           */
          power_on?: boolean;
        };
      };
    };
  };
  /** Set multiple states across multiple selectors. */
  "set-states": {
    responses: {
      /** 2XX */
      "2XX": {
        content: {
          "application/json": {
            results?: {
              operation?: {
                /** @example [selector 1] */
                selector?: string;
                /** @example on */
                power?: string;
                /**
                 * @default 0
                 * @example 5
                 */
                duration?: number;
              };
              results?: {
                /** @example dxxxxxxxxxx */
                id?: string;
                /** @example Light 1 */
                label?: string;
                /** @example ok */
                status?: string;
              }[];
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description Array of `state` hashes as per [Set State](doc:set-state). No more than 50 entries. */
          states: unknown[];
          /** @description Default values to use when not specified in each `states[]` object. */
          defaults?: { [key: string]: unknown };
          /**
           * @description Execute the query [fast](doc:set-state#fast-mode), without initial state checks and wait for no results.
           * @default false
           */
          fast?: boolean;
        };
      };
    };
  };
  "toggle-power": {
    parameters: {
      path: {
        /** The [selector](doc:selectors) to limit which lights are toggled. */
        selector: string;
      };
    };
    responses: {
      /** 2XX */
      "2XX": {
        content: {
          "application/json": {
            results?: {
              /** @example d3b2f2d97452 */
              id?: string;
              /** @example Left Lamp */
              label?: string;
              /** @example ok */
              status?: string;
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * Format: double
           * @description The time is seconds to spend perfoming the power toggle.
           * @default 1
           */
          duration?: number;
        };
      };
    };
  };
  "breathe-effect": {
    parameters: {
      path: {
        /** The [selector](doc:selectors) to limit which lights will run the effect. */
        selector: string;
      };
    };
    responses: {
      /** 2XX */
      "2XX": {
        content: {
          "application/json": {
            results?: {
              /** @example d3b2f2d97452 */
              id?: string;
              /** @example Left Lamp */
              label?: string;
              /** @example ok */
              status?: string;
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The [color](doc:colors) to use for the breathe effect. */
          color: string;
          /**
           * @description The [color](doc:colors) to start the effect from. If this parameter is omitted then the color the bulb is currently set to is used instead.
           * @default current bulb color
           */
          from_color?: string;
          /**
           * Format: double
           * @description The time in seconds for one cycle of the effect.
           * @default 1
           */
          period?: number;
          /**
           * Format: double
           * @description The number of times to repeat the effect.
           * @default 1
           */
          cycles?: number;
          /**
           * @description If false set the light back to its previous value when effect ends, if true leave the last effect color.
           * @default false
           */
          persist?: boolean;
          /**
           * @description If true, turn the bulb on if it is not already on.
           * @default true
           */
          power_on?: boolean;
          /**
           * Format: double
           * @description Defines where in a period the target color is at its maximum. Minimum `0.0`, maximum `1.0`.
           * @default 0.5
           */
          peak?: number;
        };
      };
    };
  };
  "activate-scene": {
    parameters: {
      path: {
        /** The UUID for the scene you wish to activate */
        scene_uuid: string;
      };
    };
    responses: {
      /** 2XX */
      "2XX": {
        content: {
          "application/json": {
            results?: {
              /** @example ok */
              status?: string;
              /** @example Left */
              label?: string;
              /** @example d073d501cf2c */
              id?: string;
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * Format: double
           * @description Time in seconds to transition from the current light state to the scene state.
           * @default 1
           */
          duration?: number;
          /** @description Any of *"power", "infrared", "duration", "intensity", "hue", "saturation", "brightness"* or *"kelvin"*, specifying that these properties should not be changed on devices when applying the scene. */
          ignore?: string[];
          /** @description A `state` object as per  [Set State](doc:set-state) specifying properties to apply to all devices in the scene, overriding those configured in the scene. */
          overrides?: { [key: string]: unknown };
          /**
           * @description Execute the query [fast](doc:set-state#fast-mode), without initial state checks and wait for no results.
           * @default false
           */
          fast?: boolean;
        };
      };
    };
  };
  "list-lights": {
    parameters: {
      path: {
        /** The [selector](doc:selectors) to limit which light information is returned. */
        selector: string;
      };
    };
    responses: {
      /** 200 */
      200: {
        content: {
          "application/json":
            | {
                /** @example d073d5141876 */
                id?: string;
                /** @example 02a5b510-2d3d-46ea-92ac-c4533f75c24e */
                uuid?: string;
                /** @example Lamp */
                label?: string;
                /**
                 * @default true
                 * @example true
                 */
                connected?: boolean;
                /** @example on */
                power?: string;
                color?: {
                  /**
                   * @default 0
                   * @example 59.997253376058595
                   */
                  hue?: number;
                  /**
                   * @default 0
                   * @example 1
                   */
                  saturation?: number;
                  /**
                   * @default 0
                   * @example 3500
                   */
                  kelvin?: number;
                };
                /**
                 * @default 0
                 * @example 0.29999237048905164
                 */
                brightness?: number;
                /** @example OFF */
                effect?: string;
                group?: {
                  /** @example 06e3ec50395511e9a0757200055bf1c0 */
                  id?: string;
                  /** @example Loungeroom */
                  name?: string;
                };
                location?: {
                  /** @example f2c1aa82395411e9a0757200055bf1c0 */
                  id?: string;
                  /** @example Home */
                  name?: string;
                };
                product?: {
                  /** @example Color 1000 */
                  name?: string;
                  /** @example lifx_color_a19 */
                  identifier?: string;
                  /** @example LIFX */
                  company?: string;
                  capabilities?: {
                    /**
                     * @default true
                     * @example true
                     */
                    has_color?: boolean;
                    /**
                     * @default true
                     * @example true
                     */
                    has_variable_color_temp?: boolean;
                    /**
                     * @default true
                     * @example false
                     */
                    has_ir?: boolean;
                    /**
                     * @default true
                     * @example false
                     */
                    has_chain?: boolean;
                    /**
                     * @default true
                     * @example false
                     */
                    has_multizone?: boolean;
                    /**
                     * @default 0
                     * @example 2500
                     */
                    min_kelvin?: number;
                    /**
                     * @default 0
                     * @example 9000
                     */
                    max_kelvin?: number;
                  };
                  /**
                   * @default 0
                   * @example 22
                   */
                  product_id?: number;
                  /**
                   * @default 0
                   * @example 1
                   */
                  vendor_id?: number;
                };
                /** @example 2019-02-25T23:40:40Z */
                last_seen?: string;
                /**
                 * @default 0
                 * @example 0
                 */
                seconds_since_seen?: number;
              }[]
            | {
                /** @example d073d528d80f */
                id?: string;
                /** @example 021e0518-e5bc-4432-a42a-73f4a7d0ddbd */
                uuid?: string;
                /** @example MyZ */
                label?: string;
                /**
                 * @default true
                 * @example true
                 */
                connected?: boolean;
                /** @example on */
                power?: string;
                color?: {
                  /**
                   * @default 0
                   * @example 0
                   */
                  hue?: number;
                  /**
                   * @default 0
                   * @example 1
                   */
                  saturation?: number;
                  /**
                   * @default 0
                   * @example 3500
                   */
                  kelvin?: number;
                };
                /**
                 * @default 0
                 * @example 0.29999237048905164
                 */
                brightness?: number;
                zones?: {
                  /**
                   * @default 0
                   * @example 8
                   */
                  count?: number;
                  zones?: {
                    /**
                     * @default 0
                     * @example 0.3
                     */
                    brightness?: number;
                    /**
                     * @default 0
                     * @example 0
                     */
                    hue?: number;
                    /**
                     * @default 0
                     * @example 3500
                     */
                    kelvin?: number;
                    /**
                     * @default 0
                     * @example 1
                     */
                    saturation?: number;
                    /**
                     * @default 0
                     * @example 0
                     */
                    zone?: number;
                  }[];
                };
                /** @example OFF */
                effect?: string;
                group?: {
                  /** @example f2b54076395411e9a0757200055bf1c0 */
                  id?: string;
                  /** @example Kitchen */
                  name?: string;
                };
                location?: {
                  /** @example f2c1aa82395411e9a0757200055bf1c0 */
                  id?: string;
                  /** @example Home */
                  name?: string;
                };
                product?: {
                  /** @example LIFX Z */
                  name?: string;
                  /** @example lifx_z2 */
                  identifier?: string;
                  /** @example LIFX */
                  company?: string;
                  capabilities?: {
                    /**
                     * @default true
                     * @example true
                     */
                    has_color?: boolean;
                    /**
                     * @default true
                     * @example true
                     */
                    has_variable_color_temp?: boolean;
                    /**
                     * @default true
                     * @example false
                     */
                    has_ir?: boolean;
                    /**
                     * @default true
                     * @example false
                     */
                    has_chain?: boolean;
                    /**
                     * @default true
                     * @example true
                     */
                    has_multizone?: boolean;
                    /**
                     * @default 0
                     * @example 2500
                     */
                    min_kelvin?: number;
                    /**
                     * @default 0
                     * @example 9000
                     */
                    max_kelvin?: number;
                  };
                  /**
                   * @default 0
                   * @example 32
                   */
                  product_id?: number;
                  /**
                   * @default 0
                   * @example 1
                   */
                  vendor_id?: number;
                };
                /** @example 2019-02-25T23:40:56Z */
                last_seen?: string;
                /**
                 * @default 0
                 * @example 0
                 */
                seconds_since_seen?: number;
              }[]
            | {
                /** @example d073d5fb93d8 */
                id?: string;
                /** @example 02507649-8240-4b67-8cee-4def40e5989e */
                uuid?: string;
                /** @example MyTile */
                label?: string;
                /**
                 * @default true
                 * @example true
                 */
                connected?: boolean;
                /** @example on */
                power?: string;
                color?: {
                  /**
                   * @default 0
                   * @example 38.83726253147174
                   */
                  hue?: number;
                  /**
                   * @default 0
                   * @example 1
                   */
                  saturation?: number;
                  /**
                   * @default 0
                   * @example 3500
                   */
                  kelvin?: number;
                };
                /**
                 * @default 0
                 * @example 0.09999237048905166
                 */
                brightness?: number;
                /** @example OFF */
                effect?: string;
                chain?: {
                  /**
                   * @default 0
                   * @example 2
                   */
                  count?: number;
                  children?: {
                    /**
                     * @default 0
                     * @example 8
                     */
                    height?: number;
                    /**
                     * @default 0
                     * @example 0
                     */
                    index?: number;
                    /**
                     * @default 0
                     * @example 0
                     */
                    user_x?: number;
                    /**
                     * @default 0
                     * @example 0
                     */
                    user_y?: number;
                    /**
                     * @default 0
                     * @example 8
                     */
                    width?: number;
                  }[];
                };
                group?: {
                  /** @example f2b54076395411e9a0757200055bf1c0 */
                  id?: string;
                  /** @example Kitchen */
                  name?: string;
                };
                location?: {
                  /** @example f2c1aa82395411e9a0757200055bf1c0 */
                  id?: string;
                  /** @example Home */
                  name?: string;
                };
                product?: {
                  /** @example LIFX Tile */
                  name?: string;
                  /** @example lifx_tile */
                  identifier?: string;
                  /** @example LIFX */
                  company?: string;
                  capabilities?: {
                    /**
                     * @default true
                     * @example true
                     */
                    has_color?: boolean;
                    /**
                     * @default true
                     * @example true
                     */
                    has_variable_color_temp?: boolean;
                    /**
                     * @default true
                     * @example false
                     */
                    has_ir?: boolean;
                    /**
                     * @default true
                     * @example true
                     */
                    has_chain?: boolean;
                    /**
                     * @default true
                     * @example false
                     */
                    has_multizone?: boolean;
                    /**
                     * @default 0
                     * @example 2500
                     */
                    min_kelvin?: number;
                    /**
                     * @default 0
                     * @example 9000
                     */
                    max_kelvin?: number;
                  };
                  /**
                   * @default 0
                   * @example 55
                   */
                  product_id?: number;
                  /**
                   * @default 0
                   * @example 1
                   */
                  vendor_id?: number;
                };
                /** @example 2019-02-25T23:41:19Z */
                last_seen?: string;
                /**
                 * @default 0
                 * @example 0
                 */
                seconds_since_seen?: number;
              }[]
            | {
                /** @example d073d5699f4c */
                id?: string;
                /** @example 02313715-809b-44b5-a616-41f580666fbc */
                uuid?: string;
                /** @example Study Switch */
                label?: string;
                /**
                 * @default true
                 * @example false
                 */
                connected?: boolean;
                /** @example off */
                power?: string;
                color?: {
                  /**
                   * @default 0
                   * @example 0
                   */
                  hue?: number;
                  /**
                   * @default 0
                   * @example 0
                   */
                  saturation?: number;
                  /**
                   * @default 0
                   * @example 3500
                   */
                  kelvin?: number;
                };
                /**
                 * @default 0
                 * @example 1
                 */
                brightness?: number;
                /** @example OFF */
                effect?: string;
                group?: {
                  /** @example 967711832d4d9805334fb09ff00ee06f */
                  id?: string;
                  /** @example Study */
                  name?: string;
                };
                location?: {
                  /** @example ca197c26da03453302e10378c966b9bf */
                  id?: string;
                  /** @example Home */
                  name?: string;
                };
                relays?: {
                  /**
                   * @default 0
                   * @example 4
                   */
                  count?: number;
                  relays?: {
                    /**
                     * @default 0
                     * @example 0
                     */
                    index?: number;
                    /** @example Button 1 */
                    label?: string;
                    /** @example off */
                    power?: string;
                    /** @example Controllable */
                    mode?: string;
                  }[];
                };
                product?: {
                  /** @example LIFX Switch */
                  name?: string;
                  /** @example lifx_switch */
                  identifier?: string;
                  /** @example LIFX */
                  company?: string;
                  /**
                   * @default 0
                   * @example 1
                   */
                  vendor_id?: number;
                  /**
                   * @default 0
                   * @example 89
                   */
                  product_id?: number;
                  capabilities?: {
                    /**
                     * @default true
                     * @example false
                     */
                    has_color?: boolean;
                    /**
                     * @default true
                     * @example false
                     */
                    has_variable_color_temp?: boolean;
                    /**
                     * @default true
                     * @example false
                     */
                    has_ir?: boolean;
                    /**
                     * @default true
                     * @example false
                     */
                    has_hev?: boolean;
                    /**
                     * @default true
                     * @example false
                     */
                    has_chain?: boolean;
                    /**
                     * @default true
                     * @example true
                     */
                    has_relays?: boolean;
                    /**
                     * @default true
                     * @example true
                     */
                    has_buttons?: boolean;
                    /**
                     * @default 0
                     * @example 3
                     */
                    relay_count?: number;
                    /**
                     * @default 0
                     * @example 3
                     */
                    button_count?: number;
                    /**
                     * @default true
                     * @example false
                     */
                    has_matrix?: boolean;
                    /**
                     * @default true
                     * @example false
                     */
                    has_multizone?: boolean;
                  };
                };
                /** @example */
                last_seen?: string;
                /**
                 * @default 0
                 * @example 0
                 */
                seconds_since_seen?: number;
              }[];
        };
      };
    };
  };
  /** Make the light(s) cycle to the next or previous state in a list of states. */
  cycle: {
    responses: {
      /** 2XX */
      "2XX": {
        content: {
          "application/json": {
            results?: {
              /** @example dxxxxxxxxxx */
              id?: string;
              /** @example Light 1 */
              label?: string;
              /** @example ok */
              status?: string;
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description Array of `state` hashes as per [Set State](doc:set-state). Must have 2 to 10 entries. */
          states: unknown[];
          /** @description Default values to use when not specified in each `states[]` object. */
          defaults?: { [key: string]: unknown };
          /**
           * @description Direction in which to cycle through the list. Can be `forward` or `backward`
           * @default forward
           */
          direction?: string;
        };
      };
    };
  };
  "state-delta": {
    parameters: {
      path: {
        /** The [selector](doc:selectors) to limit which lights are controlled. */
        selector: string;
      };
    };
    responses: {
      /** 2XX */
      "2XX": {
        content: {
          "application/json": {
            results?: {
              /** @example d3b2f2d97452 */
              id?: string;
              /** @example Left Lamp */
              label?: string;
              /** @example ok */
              status?: string;
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The power state you want to set on the selector. `on` or `off` */
          power?: string;
          /**
           * Format: double
           * @description How long in seconds you want the power action to take. Range: `0.0` â€“ `3155760000.0` (100 years)
           * @default 1
           */
          duration?: number;
          /**
           * Format: double
           * @description The maximum brightness of the infrared channel.
           */
          infrared?: number;
          /**
           * Format: double
           * @description Rotate the hue by this angle in degrees.  Range: `-360.0` â€“ `360.0` degrees
           */
          hue?: number;
          /**
           * Format: double
           * @description Change the saturation by this additive amount; the resulting saturation is clipped to `[0, 1]`.
           */
          saturation?: number;
          /**
           * Format: double
           * @description Change the brightness by this additive amount; the resulting brightness is clipped to `[0, 1]`.
           */
          brightness?: number;
          /**
           * Format: int32
           * @description Change the kelvin by this additive amount; the resulting kelvin is clipped to `[2500, 9000]`.
           */
          kelvin?: number;
          /**
           * @description Execute the query [fast](doc:set-state#fast-mode), without initial state checks and wait for no results.
           * @default false
           */
          fast?: boolean;
        };
      };
    };
  };
  "move-effect": {
    parameters: {
      path: {
        /** The [selector](doc:selectors) to limit which devices will run the effect. */
        selector: string;
      };
    };
    responses: {
      /** 2XX */
      "2XX": {
        content: {
          "application/json": {
            results?: {
              /** @example d3b2f2d97452 */
              id?: string;
              /** @example Left Lamp */
              label?: string;
              /** @example ok */
              status?: string;
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description Move direction, can be `forward` or `backward`.
           * @default forward
           */
          direction?: string;
          /**
           * Format: double
           * @description The time in seconds for one cycle of the effect.
           * @default 1
           */
          period?: number;
          /**
           * Format: float
           * @description The number of times to move the pattern across the device.  Special cases are `0` to switch the effect off, and unspecified to continue indefinitely.
           * @default null
           */
          cycles?: number;
          /**
           * @description Switch any selected device that is off to on before performing the effect.
           * @default true
           */
          power_on?: boolean;
          /**
           * @description Execute the query [fast](doc:set-state#fast-mode), without initial state checks and wait for no results.
           * @default false
           */
          fast?: boolean;
        };
      };
    };
  };
  "morph-effect": {
    parameters: {
      path: {
        /** The [selector](doc:selectors) to limit which devices will run the effect. */
        selector: string;
      };
    };
    responses: {
      /** 2XX */
      "2XX": {
        content: {
          "application/json": {
            results?: {
              /** @example d3b2f2d97452 */
              id?: string;
              /** @example My tile */
              label?: string;
              /** @example ok */
              status?: string;
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * Format: double
           * @description This controls how quickly the morph runs. It is measured in seconds. A lower number means the animation is faster
           * @default 5
           */
          period?: number;
          /**
           * Format: float
           * @description How long the animation lasts for in seconds. Not specifying a duration makes the animation never stop. Specifying 0 makes the animation stop. Note that there is a known bug where the tile remains in the animation once it has completed if duration is nonzero.
           * @default null
           */
          duration?: number;
          /**
           * @description You can control the colors in the animation by specifying a list of color specifiers. For example `["red", "hue:100 saturation:1"]`. See https://api.developer.lifx.com/docs/colors
           * @default [
           *   "7 colours across the spectrum"
           * ]
           */
          palette?: string[];
          /**
           * @description Switch any selected device that is off to on before performing the effect.
           * @default true
           */
          power_on?: boolean;
          /**
           * @description Execute the query [fast](doc:set-state#fast-mode), without initial state checks and wait for no results.
           * @default false
           */
          fast?: boolean;
        };
      };
    };
  };
  "flame-effect": {
    parameters: {
      path: {
        /** The [selector](doc:selectors) to limit which devices will run the effect. */
        selector: string;
      };
    };
    responses: {
      /** 2XX */
      "2XX": {
        content: {
          "application/json": {
            results?: {
              /** @example d3b2f2d97452 */
              id?: string;
              /** @example My tile */
              label?: string;
              /** @example ok */
              status?: string;
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * Format: double
           * @description This controls how quickly the flame runs. It is measured in seconds. A lower number means the animation is faster
           * @default 5
           */
          period?: number;
          /**
           * Format: float
           * @description How long the animation lasts for in seconds. Not specifying a duration makes the animation never stop. Specifying 0 makes the animation stop. Note that there is a known bug where the tile remains in the animation once it has completed if duration is nonzero.
           * @default null
           */
          duration?: number;
          /**
           * @description Switch any selected device that is off to on before performing the effect.
           * @default true
           */
          power_on?: boolean;
          /**
           * @description Execute the query [fast](doc:set-state#fast-mode), without initial state checks and wait for no results.
           * @default false
           */
          fast?: boolean;
        };
      };
    };
  };
  "effects-off": {
    parameters: {
      path: {
        /** The [selector](doc:selectors) to limit which lights this applies to */
        selector: string;
      };
    };
    responses: {
      /** 2XX */
      "2XX": {
        content: {
          "application/json": {
            results?: {
              /** @example d3b2f2d97452 */
              id?: string;
              /** @example Left Lamp */
              label?: string;
              /** @example ok */
              status?: string;
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description If true, the devices will also be turned off
           * @default false
           */
          power_off?: boolean;
        };
      };
    };
  };
  /** Control clean-capable LIFX devices */
  clean: {
    parameters: {
      path: {
        /** Selector */
        selector: string;
      };
    };
    responses: {
      /** 200 */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** 400 */
      400: {
        content: {
          "application/json": {
            /** @example [error-message] */
            error?: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description Turn the device on / off
           * @default false
           */
          stop?: boolean;
          /**
           * Format: int32
           * @description Duration in seconds (leaving blank or 0 sets the default duration for the device)
           * @default 0
           */
          duration?: number;
        };
      };
    };
  };
}

export interface external {}
